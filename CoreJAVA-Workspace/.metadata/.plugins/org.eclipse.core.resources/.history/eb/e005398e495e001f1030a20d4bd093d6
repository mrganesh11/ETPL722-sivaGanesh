package com.evergent.corejava.ganesh.application4;

import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

public class InventoryTab extends BaseTab {

    @Override
    public void displayMenu() {
        printHeader("Inventory");
        System.out.println(ColorUtils.INFO_COLOR + "| C - Check Medicine      |" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "| B - Browse Medicines    |" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "| U - Update Medicine     |" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "| M - Return to Main Menu |" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "===========================" + ColorUtils.RESET);
        System.out.print(ColorUtils.INPUT_COLOR + "Enter your Choice (C,B,U,M) : " + ColorUtils.RESET);
    }

    @Override
    public void handleChoice(String choice, Scanner sc) {
        switch (choice) {
            case "C":
                checkMedicine(sc);
                break;
            case "B":
                browseMedicines();
                break;
            case "U":
                updateMedicineCost(sc);
                break;
            case "M":
                break;
            default:
                System.out.println(ColorUtils.ERROR_COLOR + "Invalid choice. Please try again." + ColorUtils.RESET);
        }
    }

    private void checkMedicine(Scanner sc) {
        System.out.print(ColorUtils.INPUT_COLOR + "Enter Medicine Code (A, B, C): " + ColorUtils.RESET);
        String medicineCode = sc.nextLine().toUpperCase();
        Medicine medicine = Medicine.getMedicineByCode(medicineCode);
        if (medicine != null) {
            System.out.println(ColorUtils.SUCCESS_COLOR + "Medicine " + medicine.getCode() + " is available with cost Rs." + medicine.getCost() + ColorUtils.RESET);
        } else {
            System.out.println(ColorUtils.ERROR_COLOR + "Invalid Medicine Code." + ColorUtils.RESET);
        }
    }

    private void browseMedicines() {
        Medicine[] medicines = Medicine.getAllMedicines();
        for (Medicine medicine : medicines) {
            System.out.println(ColorUtils.INFO_COLOR + medicine.getCode() + " - Medicine " + medicine.getCode() + " \t Rs." + medicine.getCost() + ColorUtils.RESET);
        }
    }

    private void updateMedicineCost(Scanner sc) {
        System.out.print(ColorUtils.INPUT_COLOR + "Enter Medicine Code (A, B, C): " + ColorUtils.RESET);
        String medicineCode = sc.nextLine().toUpperCase();
        Medicine medicine = Medicine.getMedicineByCode(medicineCode);
        if (medicine != null) {
            System.out.print(ColorUtils.INPUT_COLOR + "Enter new cost for Medicine " + medicine.getCode() + ": " + ColorUtils.RESET);
            medicine.setCost(Integer.parseInt(sc.nextLine()));
            System.out.println(ColorUtils.SUCCESS_COLOR + "Medicine " + medicine.getCode() + " cost updated to Rs." + medicine.getCost() + ColorUtils.RESET);
        } else {
            System.out.println(ColorUtils.ERROR_COLOR + "Invalid Medicine Code." + ColorUtils.RESET);
        }
    }
}

public class SalesTab extends BaseTab {

    private int totalCost = 0;
    private int paymentAmount = 0;
    private int additionalCharges = 0;
    private int quantity = 0;

    @Override
    public void displayMenu() {
        printHeader("Sales");
        System.out.println(ColorUtils.INFO_COLOR + "| T - To sell and get bill   |" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "| P - Make Payment           |" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "| I - Display Invoice        |" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "| S - Display Summary        |" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "| M - Return to Main Menu    |" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "==============================" + ColorUtils.RESET);
        System.out.print(ColorUtils.INPUT_COLOR + "Enter your Choice (T,P,I,S,M) : " + ColorUtils.RESET);
    }

    @Override
    public void handleChoice(String choice, Scanner sc) {
        switch (choice) {
            case "T":
                calculateTotalCost(sc);
                break;
            case "P":
                processPayment(sc);
                break;
            case "I":
                displayInvoice();
                break;
            case "S":
                displaySummary();
                break;
            case "M":
                break;
            default:
                System.out.println(ColorUtils.ERROR_COLOR + "Invalid choice. Please try again." + ColorUtils.RESET);
        }
    }

    private void calculateTotalCost(Scanner sc) {
        System.out.print(ColorUtils.INPUT_COLOR + "Enter Medicine Code (A, B, C): " + ColorUtils.RESET);
        String medicineCode = sc.nextLine().toUpperCase();
        Medicine medicine = Medicine.getMedicineByCode(medicineCode);
        if (medicine != null) {
            System.out.print(ColorUtils.INPUT_COLOR + "Enter quantity: " + ColorUtils.RESET);
            quantity = Integer.parseInt(sc.nextLine());
            totalCost = medicine.getCost() * quantity;
            System.out.println(ColorUtils.SUCCESS_COLOR + "Total cost: Rs." + totalCost + ColorUtils.RESET);
        } else {
            System.out.println(ColorUtils.ERROR_COLOR + "Invalid Medicine Code." + ColorUtils.RESET);
        }
    }

    private void processPayment(Scanner sc) {
        if (totalCost == 0) {
            System.out.println(ColorUtils.ERROR_COLOR + "Total cost is not calculated yet. Please calculate the total cost first." + ColorUtils.RESET);
        } else {
            String otp = generateOTP();
            System.out.println(ColorUtils.SUCCESS_COLOR + "Your OTP for payment is: " + otp + ColorUtils.RESET);
            System.out.print(ColorUtils.INPUT_COLOR + "Enter OTP: " + ColorUtils.RESET);
            String enteredOtp = sc.nextLine();
            if (otp.equals(enteredOtp)) {
                System.out.print(ColorUtils.INPUT_COLOR + "Enter payment amount: " + ColorUtils.RESET);
                paymentAmount = Integer.parseInt(sc.nextLine());
                if (paymentAmount >= totalCost) {
                    System.out.println(ColorUtils.SUCCESS_COLOR + "Payment successful. Change: Rs." + (paymentAmount - totalCost) + ColorUtils.RESET);
                } else {
                    System.out.println(ColorUtils.ERROR_COLOR + "Insufficient payment. Please enter a valid amount." + ColorUtils.RESET);
                }
            } else {
                System.out.println(ColorUtils.ERROR_COLOR + "Invalid OTP. Payment failed." + ColorUtils.RESET);
            }
        }
    }

    private String generateOTP() {
        Random random = new Random();
        int otp = 1000 + random.nextInt(9000);
        return String.valueOf(otp);
    }

    private void displayInvoice() {
        System.out.println(ColorUtils.INFO_COLOR + "==================================" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "|              Invoice           |" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "==================================" + ColorUtils.RESET);
        System.out.println("Medicine Cost: Rs." + totalCost);
        System.out.println("Additional Charges: Rs." + additionalCharges);
        System.out.println("Total Amount: Rs." + (totalCost + additionalCharges));
        System.out.println("");
    }

    private void displaySummary() {
        System.out.println(ColorUtils.INFO_COLOR + "===================================" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "|             Summary             |" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "===================================" + ColorUtils.RESET);
        System.out.println("Total Cost: Rs." + totalCost);
        System.out.println("Additional Charges: Rs." + additionalCharges);
        System.out.println("Total Amount: Rs." + (totalCost + additionalCharges));
        totalCost = 0;
        System.out.println(ColorUtils.SUCCESS_COLOR + "Thank You! Buy again :)" + ColorUtils.RESET);
        System.out.println("");
    }
}// AccountTab class
public class AccountTab extends BaseTab {

    private static String accountName = "Default User";
    private static String accountEmail = "user@example.com";

    @Override
    public void displayMenu() {
        printHeader("My Account");
        System.out.println(ColorUtils.INFO_COLOR + "| V - View Account        |" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "| U - Update Account      |" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "| M - Return to Main Menu |" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "===========================" + ColorUtils.RESET);
        System.out.print(ColorUtils.INPUT_COLOR + "Enter your Choice (V,U,M) : " + ColorUtils.RESET);
    }

    @Override
    public void handleChoice(String choice, Scanner sc) {
        switch (choice) {
            case "V":
                viewAccountDetails();
                break;
            case "U":
                updateAccountDetails(sc);
                break;
            case "M":
                break;
            default:
                System.out.println(ColorUtils.ERROR_COLOR + "Invalid choice. Please try again." + ColorUtils.RESET);
        }
    }

    private void viewAccountDetails() {
        System.out.println(ColorUtils.INFO_COLOR + "=================================" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "|          Account Details      |" + ColorUtils.RESET);
        System.out.println(ColorUtils.INFO_COLOR + "=================================" + ColorUtils.RESET);
        System.out.println("Name: " + accountName);
        System.out.println("Email: " + accountEmail);
    }

    private void updateAccountDetails(Scanner sc) {
        System.out.print(ColorUtils.INPUT_COLOR + "Enter new account name: " + ColorUtils.RESET);
        accountName = sc.nextLine();
        System.out.print(ColorUtils.INPUT_COLOR + "Enter new account email: " + ColorUtils.RESET);
        accountEmail = sc.nextLine();
        System.out.println(ColorUtils.SUCCESS_COLOR + "Account details updated successfully." + ColorUtils.RESET);
    }
}